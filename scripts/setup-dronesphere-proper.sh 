#!/bin/bash
# setup-dronesphere-proper.sh - Correct Professional Setup
# ========================================================
# Creates proper venvs in dronesphere/agent/.venv and dronesphere/server/.venv

set -e

echo "🚁 DroneSphere Proper Professional Setup"
echo "========================================="
echo ""

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_step() { echo -e "${BLUE}▶ $1${NC}"; }
print_success() { echo -e "${GREEN}✅ $1${NC}"; }
print_warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }
print_error() { echo -e "${RED}❌ $1${NC}"; }

# Verify correct structure
verify_structure() {
    print_step "Verifying project structure..."
    
    if [ ! -f "pyproject.toml" ]; then
        print_error "pyproject.toml not found. Please run from project root."
        exit 1
    fi
    
    if [ ! -d "dronesphere/agent" ]; then
        print_error "dronesphere/agent/ not found!"
        exit 1
    fi
    
    if [ ! -d "dronesphere/server" ]; then
        print_error "dronesphere/server/ not found!"
        exit 1
    fi
    
    if [ ! -f "dronesphere/agent/main.py" ]; then
        print_error "Agent main.py not found in dronesphere/agent/"
        exit 1
    fi
    
    if [ ! -f "dronesphere/server/main.py" ]; then
        print_error "Server main.py not found in dronesphere/server/"
        exit 1
    fi
    
    print_success "Correct structure verified"
    echo "  📁 Agent: dronesphere/agent/"
    echo "  📁 Server: dronesphere/server/"
    echo "  📁 Core: dronesphere/core/"
    echo ""
}

# Clean up any incorrect previous attempts
cleanup_incorrect_structure() {
    print_step "Cleaning up any incorrect previous setups..."
    
    # Remove root-level incorrect directories
    rm -rf agent/ server/ venv-agent/ venv-server/ 2>/dev/null || true
    
    # Remove incorrect requirements files
    rm -f requirements-agent.txt requirements-server.txt 2>/dev/null || true
    
    # Remove any incorrect venvs in wrong places
    rm -rf dronesphere/.venv-agent dronesphere/.venv-server 2>/dev/null || true
    
    print_success "Cleanup completed"
    echo ""
}

# Check prerequisites
check_prerequisites() {
    print_step "Checking prerequisites..."
    
    # Check Python
    if ! command -v python3 >/dev/null; then
        print_error "Python 3 not found"
        exit 1
    fi
    python_version=$(python3 --version | cut -d' ' -f2)
    print_success "Python $python_version detected"
    
    # Check UV
    if command -v uv >/dev/null; then
        uv_version=$(uv --version)
        print_success "UV detected: $uv_version"
        USE_UV=true
    else
        print_warning "UV not found - install for better performance"
        USE_UV=false
    fi
    
    echo ""
}

# Create requirements files in each component
create_requirements() {
    print_step "Creating optimized requirements files..."
    
    # Agent requirements (minimal for drone hardware)
    cat > dronesphere/agent/requirements.txt << 'EOF'
# DroneSphere Agent - Hardware-Optimized Dependencies
# ===================================================

# Core web framework (lightweight)
fastapi>=0.104.0
uvicorn[standard]>=0.24.0

# Data models
pydantic>=2.5.0
pydantic-settings>=2.1.0

# Drone communication (essential)
mavsdk>=3.6.0
pymavlink>=2.4.47

# Logging (lightweight)
structlog>=23.2.0

# Configuration
pyyaml>=6.0.1

# HTTP client (for server communication)
httpx>=0.25.0
EOF

    # Server requirements (full coordination features)
    cat > dronesphere/server/requirements.txt << 'EOF'
# DroneSphere Server - Full Coordination Dependencies  
# ====================================================

# Core web framework
fastapi>=0.104.0
uvicorn[standard]>=0.24.0

# Data models
pydantic>=2.5.0
pydantic-settings>=2.1.0

# Drone communication (for validation)
mavsdk>=3.6.0
pymavlink>=2.4.47

# HTTP clients
httpx>=0.25.0
aiohttp>=3.12.13
requests>=2.32.4

# Logging and monitoring
structlog>=23.2.0
rich>=13.7.0

# Configuration
pyyaml>=6.0.1

# Monitoring (server-only)
prometheus-client>=0.19.0

# Optional: Fleet communication
asyncio-mqtt>=0.13.0
EOF

    print_success "Requirements files created"
    echo "  📄 dronesphere/agent/requirements.txt"
    echo "  📄 dronesphere/server/requirements.txt"
    echo ""
}

# Setup agent environment
setup_agent_env() {
    print_step "Setting up Agent Environment in dronesphere/agent/.venv/"
    
    cd dronesphere/agent
    
    # Remove existing if present
    rm -rf .venv 2>/dev/null || true
    
    if [ "$USE_UV" = true ]; then
        uv venv .venv
        print_success "Agent UV environment created"
        
        # Install dependencies with UV
        uv pip install --python .venv/bin/python -r requirements.txt
        # Install the main package (from project root)
        uv pip install --python .venv/bin/python -e ../..
        
    else
        python3 -m venv .venv
        print_success "Agent Python environment created"
        
        # Install dependencies
        .venv/bin/pip install --upgrade pip
        .venv/bin/pip install -r requirements.txt
        # Install the main package (from project root)
        .venv/bin/pip install -e ../..
    fi
    
    # Test agent environment
    if .venv/bin/python -c "import dronesphere.agent.main; print('Agent imports OK')" 2>/dev/null; then
        print_success "Agent environment configured and tested"
    else
        print_warning "Agent environment created but imports may need verification"
    fi
    
    cd ../..
    echo ""
}

# Setup server environment  
setup_server_env() {
    print_step "Setting up Server Environment in dronesphere/server/.venv/"
    
    cd dronesphere/server
    
    # Remove existing if present
    rm -rf .venv 2>/dev/null || true
    
    if [ "$USE_UV" = true ]; then
        uv venv .venv
        print_success "Server UV environment created"
        
        # Install dependencies with UV
        uv pip install --python .venv/bin/python -r requirements.txt
        # Install the main package (from project root)
        uv pip install --python .venv/bin/python -e ../..
        
    else
        python3 -m venv .venv
        print_success "Server Python environment created"
        
        # Install dependencies
        .venv/bin/pip install --upgrade pip
        .venv/bin/pip install -r requirements.txt
        # Install the main package (from project root)
        .venv/bin/pip install -e ../..
    fi
    
    # Test server environment
    if .venv/bin/python -c "import dronesphere.server.main; print('Server imports OK')" 2>/dev/null; then
        print_success "Server environment configured and tested"
    else
        print_warning "Server environment created but imports may need verification"
    fi
    
    cd ../..
    echo ""
}

# Create professional startup scripts
create_startup_scripts() {
    print_step "Creating professional startup scripts..."
    
    # Agent startup script
    cat > scripts/start-agent.sh << 'EOF'
#!/bin/bash
# DroneSphere Agent Startup
# =========================

set -e

echo "🚁 DroneSphere Agent"
echo "===================="

# Check SITL/Hardware connection
if ! nc -u -z localhost 14540 2>/dev/null; then
    echo "⚠️  Flight controller not detected on port 14540"
    echo "💡 For SITL: ./scripts/run_sitl.sh"
    echo "💡 For hardware: Check MAVLink connection"
    exit 1
fi

# Navigate to agent directory
cd dronesphere/agent

# Check agent environment
if [ ! -d ".venv" ]; then
    echo "❌ Agent environment not found!"
    echo "💡 Run setup: ./setup-dronesphere-proper.sh"
    exit 1
fi

echo "📦 Activating agent environment (hardware-optimized)..."
source .venv/bin/activate

# Verify imports
if ! python -c "import dronesphere.agent.main" 2>/dev/null; then
    echo "❌ Agent environment damaged. Re-run setup."
    exit 1
fi

echo "🚀 Starting agent on port 8001..."
python -m dronesphere.agent
EOF

    # Server startup script
    cat > scripts/start-server.sh << 'EOF'
#!/bin/bash
# DroneSphere Server Startup
# ==========================

set -e

echo "🌐 DroneSphere Server"
echo "====================="

# Navigate to server directory
cd dronesphere/server

# Check server environment
if [ ! -d ".venv" ]; then
    echo "❌ Server environment not found!"
    echo "💡 Run setup: ./setup-dronesphere-proper.sh"
    exit 1
fi

echo "📦 Activating server environment (full-featured)..."
source .venv/bin/activate

# Verify imports
if ! python -c "import dronesphere.server.main" 2>/dev/null; then
    echo "❌ Server environment damaged. Re-run setup."
    exit 1
fi

echo "🚀 Starting server on port 8002..."
python -m dronesphere.server
EOF

    # Development startup (all services)
    cat > scripts/dev-start.sh << 'EOF'
#!/bin/bash
# DroneSphere Development Mode
# ===========================

set -e

echo "🚁 DroneSphere Development Setup"
echo "================================="

# Function to run in terminal
run_in_terminal() {
    local title="$1"
    local command="$2"
    
    if command -v gnome-terminal >/dev/null; then
        gnome-terminal --title="$title" -- bash -c "cd $(pwd); $command; exec bash"
    elif command -v xterm >/dev/null; then
        xterm -title "$title" -e bash -c "cd $(pwd); $command; exec bash" &
    else
        echo "⚠️  No terminal found. Run manually in separate terminals:"
        echo "   $command"
        return 1
    fi
}

echo "🚀 Starting all services..."

# Start SITL
echo "1. Starting SITL..."
run_in_terminal "SITL" "./scripts/run_sitl.sh"
sleep 3

# Start Server
echo "2. Starting Server..."  
run_in_terminal "Server" "./scripts/start-server.sh"
sleep 2

# Start Agent
echo "3. Starting Agent..."
run_in_terminal "Agent" "./scripts/start-agent.sh"

echo ""
echo "✅ Development environment started!"
echo ""
echo "🔍 Check services:"
echo "   curl localhost:8002/ping"
echo "   curl localhost:8001/health"
echo ""
echo "🧪 Test mission:"
echo "   ./scripts/test-mission.sh"
EOF

    # Test mission script
    cat > scripts/test-mission.sh << 'EOF'
#!/bin/bash
# Test DroneSphere Mission
# =======================

set -e

echo "🧪 Testing DroneSphere Mission"
echo "=============================="

# Check all services
check_service() {
    local name="$1"
    local test_cmd="$2"
    
    if eval "$test_cmd" >/dev/null 2>&1; then
        echo "✅ $name running"
    else
        echo "❌ $name not running"
        return 1
    fi
}

echo "🔍 Checking services..."
check_service "SITL" "nc -u -z localhost 14540" || { echo "Start: ./scripts/run_sitl.sh"; exit 1; }
check_service "Server" "curl -s localhost:8002/ping" || { echo "Start: ./scripts/start-server.sh"; exit 1; }
check_service "Agent" "curl -s localhost:8001/health" || { echo "Start: ./scripts/start-agent.sh"; exit 1; }

echo ""
echo "🚁 Executing autonomous mission..."

curl -X POST localhost:8002/drones/1/commands \
  -H "Content-Type: application/json" \
  -d '{
    "sequence": [
      {"name": "takeoff", "params": {"altitude": 5.0}},
      {"name": "wait", "params": {"duration": 2.0}},
      {"name": "land", "params": {}}
    ],
    "metadata": {"test": "autonomous_validation"}
  }' | jq '.' 2>/dev/null || echo "✅ Mission submitted!"

echo ""
echo "✅ Mission sent! Watch logs for execution."
EOF

    # Environment status script
    cat > scripts/check-env.sh << 'EOF'
#!/bin/bash
# Check DroneSphere Environment Status
# ===================================

echo "🔍 DroneSphere Environment Status"
echo "=================================="
echo ""

# Check agent environment
echo "📱 Agent Environment:"
if [ -d "dronesphere/agent/.venv" ]; then
    echo "  ✅ Virtual environment exists"
    echo "  📦 Location: dronesphere/agent/.venv"
    cd dronesphere/agent
    if source .venv/bin/activate 2>/dev/null && python -c "import dronesphere.agent.main" 2>/dev/null; then
        echo "  ✅ Imports working"
        python -c "
import pkg_resources
pkgs = [d for d in pkg_resources.working_set if d.project_name in ['fastapi', 'mavsdk', 'uvicorn']]
for pkg in pkgs: print(f'    {pkg.project_name}: {pkg.version}')
" 2>/dev/null || echo "  📦 Dependencies installed"
    else
        echo "  ⚠️  Import issues detected"
    fi
    deactivate 2>/dev/null || true
    cd ../..
else
    echo "  ❌ Virtual environment missing"
fi

echo ""

# Check server environment
echo "🖥️  Server Environment:"
if [ -d "dronesphere/server/.venv" ]; then
    echo "  ✅ Virtual environment exists"
    echo "  📦 Location: dronesphere/server/.venv"
    cd dronesphere/server
    if source .venv/bin/activate 2>/dev/null && python -c "import dronesphere.server.main" 2>/dev/null; then
        echo "  ✅ Imports working"
        python -c "
import pkg_resources
pkgs = [d for d in pkg_resources.working_set if d.project_name in ['fastapi', 'mavsdk', 'uvicorn', 'prometheus-client']]
for pkg in pkgs: print(f'    {pkg.project_name}: {pkg.version}')
" 2>/dev/null || echo "  📦 Dependencies installed"
    else
        echo "  ⚠️  Import issues detected"
    fi
    deactivate 2>/dev/null || true
    cd ../..
else
    echo "  ❌ Virtual environment missing"
fi

echo ""
echo "💾 Environment sizes:"
du -sh dronesphere/agent/.venv 2>/dev/null | sed 's/^/  Agent:  /' || echo "  Agent:  Not found"
du -sh dronesphere/server/.venv 2>/dev/null | sed 's/^/  Server: /' || echo "  Server: Not found"
EOF

    # Make all scripts executable
    chmod +x scripts/*.sh
    
    print_success "Professional startup scripts created"
    echo "  🚀 scripts/start-agent.sh"
    echo "  🚀 scripts/start-server.sh" 
    echo "  🚀 scripts/dev-start.sh"
    echo "  🧪 scripts/test-mission.sh"
    echo "  🔍 scripts/check-env.sh"
    echo ""
}

# Show final summary
show_summary() {
    echo ""
    echo -e "${GREEN}🎉 Proper Professional Setup Complete!${NC}"
    echo "======================================"
    echo ""
    echo "📁 Structure:"
    echo "   dronesphere/agent/.venv/     # Hardware-optimized environment"
    echo "   dronesphere/server/.venv/    # Full-featured environment" 
    echo "   dronesphere/core/            # Shared code"
    echo "   dronesphere/commands/        # Shared commands"
    echo "   scripts/                     # Professional startup scripts"
    echo ""
    echo "📋 Environment Details:"
    du -sh dronesphere/agent/.venv/ 2>/dev/null | sed 's/^/   Agent:  /' || echo "   Agent:  Created"
    du -sh dronesphere/server/.venv/ 2>/dev/null | sed 's/^/   Server: /' || echo "   Server: Created"
    echo ""
    echo "🚀 Quick Start (Development):"
    echo "   ./scripts/dev-start.sh"
    echo ""
    echo "🔧 Manual Start:"
    echo "   ./scripts/run_sitl.sh       # Terminal 1: SITL"
    echo "   ./scripts/start-server.sh   # Terminal 2: Server"
    echo "   ./scripts/start-agent.sh    # Terminal 3: Agent"
    echo ""
    echo "🧪 Test & Monitor:"
    echo "   ./scripts/test-mission.sh   # Test autonomous mission"
    echo "   ./scripts/check-env.sh      # Check environment status"
    echo ""
    echo "📦 Deployment:"
    echo "   Agent:  Copy dronesphere/agent/ to drone hardware"
    echo "   Server: Copy dronesphere/server/ to coordination hardware"
    echo "   Shared: Copy dronesphere/{core,commands,backends}/ to both"
    echo ""
}

# Main execution
main() {
    echo "This will create proper professional setup with:"
    echo "  • dronesphere/agent/.venv/ (hardware-optimized)"
    echo "  • dronesphere/server/.venv/ (full-featured)"
    echo "  • Professional startup scripts"
    echo "  • Clean deployment structure"
    echo ""
    
    read -p "Continue? (y/N): " -n 1 -r
    echo ""
    
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Setup cancelled."
        exit 0
    fi
    
    verify_structure
    cleanup_incorrect_structure
    check_prerequisites
    create_requirements
    setup_agent_env
    setup_server_env
    create_startup_scripts
    show_summary
}

main "$@"