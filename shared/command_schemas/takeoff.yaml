# Takeoff Command Schema for MCP Integration
# Path: shared/command_schemas/takeoff.yaml

name: takeoff
description: "Launch drone to specified altitude above ground level"
category: "basic"
version: "2.0.0"

# MCP Tool Schema (JSON Schema for validation)
mcp_tool_schema:
  type: "object"
  properties:
    altitude:
      type: "number"
      minimum: 1.0
      maximum: 50.0
      default: 10.0
      description: "Target altitude above current ground level in meters"
  required: ["altitude"]
  additionalProperties: false

# AI Guidelines for Intelligent Processing
ai_guidelines:
  safety_considerations:
    - "Ensure takeoff altitude is between 1-50 meters for safety"
    - "Check that area above drone is clear of obstacles"
    - "Verify weather conditions are suitable for flight"
    - "Confirm drone is on stable, level ground before takeoff"

  user_education:
    - "Takeoff arms the drone and lifts it vertically to target altitude"
    - "The drone will hover at the specified altitude after takeoff"
    - "Altitude is measured relative to ground level, not sea level"
    - "After takeoff, drone is ready for navigation commands"

  beginner_explanation:
    - "Think of takeoff like an elevator going up to a specific floor"
    - "The drone will rise straight up and stop at your chosen height"
    - "Higher altitude = better view but follows aviation rules"
    - "Start with 10-15 meters for safety and good visibility"

  # NEW: Natural language patterns for AI recognition
  natural_language_patterns:
    english:
      - "take off to {altitude} meters"
      - "launch drone to {altitude} altitude"
      - "lift off {altitude} meters high"
      - "go up {altitude} meters"
      - "takeoff {altitude}m"

    persian:
      - "بلند شو به {altitude} متر"
      - "پرواز کن تا {altitude} متر"
      - "تیک آف {altitude} متری"

    spanish:
      - "despegar a {altitude} metros"
      - "elevar a {altitude} metros de altura"
      - "subir {altitude} metros"

    german:
      - "starten auf {altitude} Meter"
      - "abheben zu {altitude} Meter Höhe"

  # NEW: Command context awareness
  command_context:
    typical_sequence_position: "first"
    common_follow_up_commands: ["goto", "wait", "land"]
    auto_suggestions:
      - "After takeoff, consider 'wait 3 seconds' for stabilization"
      - "Typical next step: navigate to desired location"

# Parameter Definition
parameters:
  altitude:
    type: float
    required: true
    min_value: 1.0
    max_value: 50.0
    default: 10.0
    unit: "meters"
    description: "Target altitude above current ground level"

    validation:
      recommended_min: 5.0    # For stable flight
      recommended_max: 30.0   # For visual line of sight
      legal_max: 120.0        # But we limit to 50m for safety

    user_guidance:
      beginner: "Start with 10-15 meters for practice"
      expert: "Consider wind conditions at higher altitudes"
      safety_note: "Higher altitude = longer fall time if emergency"

    # NEW: Smart defaults based on user profile
    smart_defaults:
      beginner_user: 10.0
      experienced_user: 15.0
      expert_user: 20.0
      demo_mode: 8.0

# Safety and Robustness Rules
robustness:
  preconditions:
    - "Drone must be on ground (relative altitude < 0.5m)"
    - "Drone can be armed or disarmed (command will arm if needed)"
    - "Flight area must be clear of obstacles"

  failure_modes:
    already_airborne:
      action: "return_success"
      message: "Drone already airborne - takeoff not needed"

    insufficient_battery:
      action: "warn_continue"
      message: "Battery level low but sufficient for takeoff"

    bad_weather:
      action: "warn_user"
      message: "High wind conditions detected - takeoff may be unstable"

    # NEW: Additional failure modes
    ground_not_level:
      action: "warn_continue"
      message: "Ground slope detected - takeoff will compensate"

    gps_not_ready:
      action: "wait_retry"
      message: "GPS not ready - waiting for satellite lock"

# NEW: Response Templates for Consistent AI Responses
response_templates:
  success: "🚀 Takeoff successful! Drone ascending to {altitude}m altitude. Current altitude: {current_alt}m"
  warning: "⚠️ Takeoff initiated with warning: {warning_message}"
  error: "❌ Takeoff failed: {error_message}"
  info: "ℹ️ Takeoff status: {status_message}"

# NEW: Multi-language Response Templates
multilingual_responses:
  success:
    english: "🚀 Takeoff successful! Ascending to {altitude} meters."
    persian: "🚀 پرواز موفق! صعود به {altitude} متر."
    spanish: "🚀 ¡Despegue exitoso! Ascendiendo a {altitude} metros."
    german: "🚀 Start erfolgreich! Steigung auf {altitude} Meter."

# NEW: Usage Examples for AI Training
usage_examples:
  basic:
    input: "take off to 15 meters"
    output:
      commands:
        - name: "takeoff"
          params:
            altitude: 15.0
          mode: "continue"

  with_follow_up:
    input: "take off to 20m then wait 3 seconds"
    output:
      commands:
        - name: "takeoff"
          params:
            altitude: 20.0
          mode: "continue"
        - name: "wait"
          params:
            duration: 3.0
            message: "Stabilizing after takeoff"
          mode: "continue"

# NEW: Integration with Dronesphere Universal Protocol
dronesphere_integration:
  command_name: "takeoff"
  api_endpoint: "POST /fleet/commands"
  required_fields: ["altitude"]
  optional_fields: []

  example_payload:
    commands:
      - name: "takeoff"
        params:
          altitude: 15.0
        mode: "continue"
    target_drone: 1

# NEW: Telemetry Integration
telemetry_requirements:
  before_execution:
    - "relative_altitude_m"  # Must be < 0.5m
    - "armed_status"        # Can be armed or disarmed
    - "battery_percentage"  # Should be > 20%

  during_execution:
    - "relative_altitude_m"  # Monitor climb progress
    - "flight_mode"         # Should become "TAKEOFF" then "HOLD"

  success_criteria:
    - "relative_altitude_m within 1.0m of target"
    - "flight_mode == 'HOLD' or similar stable mode"
