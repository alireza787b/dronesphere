# RTL (Return to Launch) Command Schema for MCP Integration
# Path: shared/command_schemas/rtl.yaml

name: rtl
description: "Return to launch point and land automatically"
category: "basic"
version: "2.0.0"

# MCP Tool Schema (JSON Schema for validation)
mcp_tool_schema:
  type: "object"
  properties: {}  # RTL command has no parameters
  additionalProperties: false

# AI Guidelines for Intelligent Processing
ai_guidelines:
  safety_considerations:
    - "Ensure sufficient battery for return journey to launch point"
    - "Verify launch point is still safe for landing"
    - "Check for obstacles along return path"
    - "RTL includes automatic landing - no manual intervention needed"

  user_education:
    - "RTL automatically flies drone back to takeoff point and lands"
    - "This is a fully autonomous return sequence with no user input needed"
    - "Drone follows safe return path, avoiding obstacles when possible"
    - "RTL is ideal for emergency situations or when manual control is lost"

  beginner_explanation:
    - "Think of RTL like a 'come home' button for your drone"
    - "Drone remembers where it took off and flies back there automatically"
    - "It will land at the same spot where it originally took off"
    - "This is the safest way to recover your drone if you're unsure of location"

  # Natural language patterns for AI recognition
  natural_language_patterns:
    english:
      - "return home"
      - "come back"
      - "return to launch"
      - "bring it back"
      - "emergency return"
      - "rtl"
      - "go back to start"

    persian:
      - "خانه برگرد"
      - "برگرد به نقطه شروع"
      - "بازگشت به خانه"
      - "بازگشت اضطراری"

    spanish:
      - "volver a casa"
      - "regresar al punto de inicio"
      - "retorno de emergencia"
      - "volver al lanzamiento"

    german:
      - "nach Hause zurückkehren"
      - "zurück zum Startpunkt"
      - "Notfall-Rückkehr"

  # RTL behavior intelligence
  rtl_intelligence:
    automatic_behavior:
      description: "RTL is a complete autonomous sequence"
      sequence: ["return_to_launch_point", "automatic_landing"]
      explanation: "RTL handles both navigation and landing automatically"
      no_user_intervention: "Once initiated, RTL completes without further commands"

    when_to_suggest:
      - "User mentions 'lost', 'bring back', 'emergency return'"
      - "Battery getting low and drone is far from launch point"
      - "User seems uncertain about drone location or return path"
      - "Signal quality issues or connection problems"

    smart_suggestions:
      battery_low: "Battery at {percent}% - RTL recommended for safe return"
      distance_far: "Drone is {distance}m from launch - consider RTL"
      signal_weak: "Signal strength low - RTL ensures safe autonomous return"

# Parameter Definition (RTL has no parameters)
parameters: {}

# Enhanced Safety and Robustness Rules
robustness:
  preconditions:
    - "Drone must be airborne (relative altitude > 0.5m)"
    - "Launch point GPS coordinates must be available"
    - "Sufficient battery for return journey"

  failure_modes:
    already_at_launch:
      action: "return_success"
      message: "Drone already at launch point - RTL not needed"
      detection: "distance_to_home < 5.0m"

    insufficient_battery:
      action: "warn_continue"
      message: "Battery low but should be sufficient for RTL - proceeding with return"
      threshold: "< 25% battery remaining"

    no_launch_point:
      action: "error"
      message: "Launch point not available - cannot execute RTL"
      fallback: "Consider using 'land' command at current position"

    # NEW: Advanced failure scenarios
    gps_lost:
      action: "continue_with_last_known"
      message: "GPS temporarily lost - using last known launch coordinates"

    path_obstructed:
      action: "climb_and_return"
      message: "Obstacles detected - climbing to safe altitude for return"
      safe_altitude: "Current altitude + 10m or minimum 20m"

# NEW: RTL Sequence Phases
rtl_sequence:
  phases:
    1:
      name: "climb_to_rtl_altitude"
      description: "Climb to safe return altitude"
      typical_altitude: "Current + 10m or 20m minimum"
      purpose: "Clear obstacles on return path"

    2:
      name: "navigate_to_launch"
      description: "Autonomous navigation to launch point"
      navigation_method: "GPS waypoint following"
      speed: "Optimized for battery conservation"

    3:
      name: "land_at_launch"
      description: "Precision landing at launch coordinates"
      landing_method: "GPS + sensor fusion"
      accuracy: "Within 2m of original takeoff point"

# Response Templates for Consistent AI Responses
response_templates:
  initiated: "🏠 RTL initiated! Drone returning to launch point ({distance:.0f}m away)"
  climbing: "⬆️ Climbing to safe RTL altitude ({altitude}m) for obstacle clearance"
  navigating: "🧭 Navigating home - ETA: {eta_seconds}s | Battery: {battery}%"
  landing: "🛬 Arriving at launch point - beginning precision landing sequence"
  success: "✅ RTL complete! Drone safely landed at launch point"
  warning: "⚠️ RTL warning: {warning_message}"
  error: "❌ RTL failed: {error_message}"

# Multi-language Response Templates
multilingual_responses:
  initiated:
    english: "🏠 RTL initiated! Returning to launch point."
    persian: "🏠 بازگشت به خانه آغاز شد! در حال بازگشت به نقطه پرواز."
    spanish: "🏠 ¡RTL iniciado! Regresando al punto de lanzamiento."
    german: "🏠 RTL gestartet! Rückkehr zum Startpunkt."

  success:
    english: "✅ RTL complete! Drone safely home."
    persian: "✅ بازگشت به خانه تکمیل شد! پهپاد با ایمنی در خانه است."
    spanish: "✅ ¡RTL completo! Dron seguro en casa."
    german: "✅ RTL abgeschlossen! Drohne sicher zu Hause."

# Usage Examples for AI Training
usage_examples:
  basic_rtl:
    input: "return home"
    output:
      commands:
        - name: "rtl"
          params: {}
          mode: "continue"

  emergency_rtl:
    input: "emergency return - bring the drone back now"
    output:
      commands:
        - name: "rtl"
          params: {}
          mode: "continue"
      priority: "emergency"
      explanation: "Executing emergency RTL for immediate safe return"

  battery_low_rtl:
    input: "battery is getting low, better come back"
    context: {"battery_percent": 22}
    output:
      commands:
        - name: "rtl"
          params: {}
          mode: "continue"
      explanation: "Battery at 22% - RTL recommended for safe return before critical level"

# Integration with Dronesphere Universal Protocol
dronesphere_integration:
  command_name: "rtl"
  api_endpoint: "POST /fleet/commands"
  required_fields: []
  optional_fields: []

  example_payload:
    commands:
      - name: "rtl"
        params: {}
        mode: "continue"
    target_drone: 1

# Telemetry Integration and Monitoring
telemetry_requirements:
  before_execution:
    - "relative_altitude_m > 0.5"  # Must be airborne
    - "home_position_set == true"  # Launch point recorded
    - "gps_fix_quality >= 3D"     # Adequate GPS for navigation

  during_execution:
    - "distance_to_home"          # Monitor return progress
    - "battery_percentage"        # Critical for completion
    - "current_position"          # Navigation monitoring
    - "flight_mode"              # Should be RTL mode

  success_criteria:
    - "distance_to_home < 2.0m"   # Close to launch point
    - "relative_altitude_m < 0.1m" # Successfully landed
    - "flight_mode indicates completion"

# Advanced Features for Professional Use
advanced_features:
  battery_optimization:
    description: "Optimize return path and speed for available battery"
    calculation: "Consider headwind, altitude changes, distance"
    failsafe: "Switch to nearest safe landing if battery critical"

  weather_adaptation:
    wind_compensation: "Adjust return path for strong headwinds"
    rain_detection: "Prioritize speed in adverse weather"
    visibility_adjustment: "Account for low visibility conditions"

  multi_drone_coordination:
    traffic_avoidance: "Coordinate RTL paths when multiple drones returning"
    launch_point_sharing: "Manage landing sequence at shared launch points"
