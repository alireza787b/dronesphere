# Land Command Schema for MCP Integration
# Path: shared/command_schemas/land.yaml

name: land
description: "Land drone at current position safely"
category: "basic"
version: "2.0.0"

# MCP Tool Schema (JSON Schema for validation)
mcp_tool_schema:
  type: "object"
  properties: {}  # Land command has no parameters
  additionalProperties: false

# AI Guidelines for Intelligent Processing
ai_guidelines:
  safety_considerations:
    - "Ensure landing area below drone is clear of people and obstacles"
    - "Check ground surface is suitable for landing (not water, slopes, etc.)"
    - "Verify drone has sufficient battery for safe landing sequence"
    - "Consider wind conditions that might affect landing precision"

  user_education:
    - "Land brings drone safely to ground at current position"
    - "Drone will descend vertically and power down rotors upon touchdown"
    - "Always verify landing area is clear before commanding land"
    - "For specific locations, use goto command first, then land"

  beginner_explanation:
    - "Think of land like an elevator going down to ground floor"
    - "Drone comes straight down and stops gently on the ground"
    - "Make sure nothing is underneath the drone before landing"
    - "This is the safe way to end your flight"

  # ENHANCED: Advanced sequence intelligence
  sequence_intelligence:
    "land at [location]":
      description: "User wants to land at specific coordinates or location"
      auto_sequence: ["goto", "land"]
      llm_instruction: "First navigate to specified location, then land safely"
      explanation: "To land at a specific location, I'll fly there first then land"
      examples:
        - input: "land at coordinates 47.398, 8.546"
          output: ["goto 47.398, 8.546", "land"]
        - input: "land at the park"
          output: ["ask for park coordinates", "goto coordinates", "land"]
        - input: "land over there"
          output: ["ask for specific coordinates", "goto", "land"]
        - input: "land 50m north"
          output: ["goto north=50, east=0, down=current", "land"]

    "emergency land":
      description: "Immediate landing without location change"
      auto_sequence: ["land"]
      priority: "high"
      llm_instruction: "Execute immediate landing at current position"

    "land and return home":
      description: "User wants to land then bring drone back"
      clarification_needed: true
      options:
        - "Land here, then I'll pick up the drone"
        - "Return to launch point and land there (use RTL instead)"

  # NEW: Natural language patterns
  natural_language_patterns:
    english:
      simple: ["land", "land the drone", "come down", "descend", "bring it down"]
      location_specific: ["land at {location}", "land near {landmark}", "land on {surface}"]
      emergency: ["emergency land", "land immediately", "land now"]

    persian:
      simple: ["فرود بیا", "زمین بیا", "فرود کن"]
      location_specific: ["در {location} فرود بیا", "کنار {landmark} فرود کن"]
      emergency: ["فوری فرود بیا", "همین الان فرود کن"]

    spanish:
      simple: ["aterrizar", "bajar", "descender", "aterrizaje"]
      location_specific: ["aterrizar en {location}", "bajar cerca de {landmark}"]
      emergency: ["aterrizaje de emergencia", "aterrizar inmediatamente"]

# Parameter Definition (Land has no parameters)
parameters: {}

# Enhanced Safety and Robustness Rules
robustness:
  preconditions:
    - "Drone must be airborne (relative altitude > 0.5m)"
    - "Landing area must be clear and suitable"
    - "Sufficient battery for landing sequence"

  # ENHANCED: More comprehensive failure modes
  failure_modes:
    already_on_ground:
      action: "return_success"
      message: "Drone already on ground - landing not needed"
      telemetry_check: "relative_altitude_m < 0.5"

    unsuitable_landing_area:
      action: "warn_user"
      message: "Landing area may not be suitable - proceed with caution"
      detection_methods:
        - "proximity_sensors"
        - "visual_inspection"
        - "user_confirmation"

    low_battery_during_landing:
      action: "continue_landing"
      message: "Battery critical - continuing emergency landing"
      priority: "highest"

    high_wind_conditions:
      action: "warn_continue"
      message: "High wind detected - landing may be less precise"

    # NEW: Advanced failure scenarios
    gps_lost_during_approach:
      action: "continue_with_sensors"
      message: "GPS lost - using visual sensors for precise landing"

    landing_sensor_failure:
      action: "manual_control_suggested"
      message: "Landing sensors unavailable - consider switching to manual"

# NEW: Landing Sequence Monitoring
landing_sequence:
  phases:
    1:
      name: "descent_initiation"
      description: "Beginning controlled descent"
      expected_flight_mode: "LAND"
      telemetry_monitoring: ["relative_altitude_m", "vertical_speed"]

    2:
      name: "final_approach"
      description: "Final descent to ground"
      altitude_threshold: 2.0  # meters
      precision_mode: true
      sensor_requirements: ["rangefinder", "optical_flow"]

    3:
      name: "touchdown"
      description: "Ground contact and motor shutdown"
      success_criteria:
        - "relative_altitude_m < 0.1"
        - "motors_stopped == true"
        - "armed == false"

# NEW: Response Templates
response_templates:
  success: "✅ Landing successful! Drone safely on ground. Flight ended."
  warning: "⚠️ Landing completed with warning: {warning_message}"
  error: "❌ Landing failed: {error_message}"
  sequence: "🛬 Executing landing sequence: {phase_description}"

# NEW: Multi-language Response Templates
multilingual_responses:
  success:
    english: "✅ Landing successful! Drone is safely on the ground."
    persian: "✅ فرود موفق! پهپاد با ایمنی روی زمین قرار گرفت."
    spanish: "✅ ¡Aterrizaje exitoso! El dron está seguro en tierra."
    german: "✅ Landung erfolgreich! Drohne sicher am Boden."

# NEW: Usage Examples
usage_examples:
  basic_land:
    input: "land the drone"
    output:
      commands:
        - name: "land"
          params: {}
          mode: "continue"

  land_at_location:
    input: "land at coordinates 47.398, 8.546"
    output:
      commands:
        - name: "goto"
          params:
            latitude: 47.398
            longitude: 8.546
            altitude: 503.0  # Adjusted for location
          mode: "continue"
        - name: "land"
          params: {}
          mode: "continue"

  emergency_land:
    input: "emergency land now"
    output:
      commands:
        - name: "land"
          params: {}
          mode: "continue"
      priority: "emergency"

# NEW: Integration with Dronesphere Universal Protocol
dronesphere_integration:
  command_name: "land"
  api_endpoint: "POST /fleet/commands"
  required_fields: []
  optional_fields: []

  example_payload:
    commands:
      - name: "land"
        params: {}
        mode: "continue"
    target_drone: 1

# NEW: Telemetry Integration
telemetry_requirements:
  before_execution:
    - "relative_altitude_m"  # Must be > 0.5m
    - "armed_status"        # Must be armed
    - "flight_mode"         # Should not already be landing

  during_execution:
    - "relative_altitude_m"  # Monitor descent
    - "vertical_speed"      # Should be negative (descending)
    - "proximity_sensors"   # Ground detection

  success_criteria:
    - "relative_altitude_m < 0.1m"
    - "flight_mode indicates landed state"
    - "motors disarmed automatically"
