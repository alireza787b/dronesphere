version: '3.8'

# Define our services (containers)
services:

  # PostgreSQL Database with PostGIS for geospatial data
  postgres:
    image: postgis/postgis:15-3.3-alpine  # Alpine = smaller image
    container_name: dronesphere-postgres
    restart: unless-stopped  # Auto-restart on failure
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_admin_dev
      POSTGRES_DB: postgres
      # PostgreSQL tuning for development
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
    ports:
      - "5432:5432"  # Host:Container port mapping
    volumes:
      # Named volume for data persistence
      - postgres_data:/var/lib/postgresql/data
      # Mount our init script
      - ./config/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d dronesphere -U dronesphere"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - dronesphere-network

  # Redis Cache for fast data access
  redis:
    image: redis:7-alpine
    container_name: dronesphere-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dronesphere-network

  # RabbitMQ Message Queue for async processing
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: dronesphere-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: dronesphere
      RABBITMQ_DEFAULT_PASS: dronesphere_pass_dev
      RABBITMQ_DEFAULT_VHOST: dronesphere
      # Enable useful plugins
      RABBITMQ_PLUGINS: "rabbitmq_management rabbitmq_web_stomp rabbitmq_consistent_hash_exchange"
    ports:
      - "5672:5672"    # AMQP port
      - "15672:15672"  # Management Web UI
      - "15674:15674"  # Web STOMP (for WebSocket)
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - dronesphere-network

  # Adminer - Database Web UI (Development only!)
  adminer:
    image: adminer:4.8.1-standalone
    container_name: dronesphere-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha-dark  # Dark theme
    depends_on:
      - postgres
    networks:
      - dronesphere-network

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  rabbitmq_logs:
    driver: local

# Custom network for service communication
networks:
  dronesphere-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
