"""Simple Web Bridge for DroneSphere MCP Server

This provides a web interface that connects to the pure MCP server,
allowing browser-based access while keeping the MCP server clean for
Claude Desktop and other MCP tools.

Path: mcp/web_bridge.py

ARCHITECTURE:
Web Browser ‚Üí Web Bridge ‚Üí MCP Server ‚Üí DroneSphere
Claude Desktop ‚Üí MCP Server ‚Üí DroneSphere
"""

import asyncio
import json
import logging
import subprocess
from typing import Any, Dict

from dotenv import load_dotenv
from fastapi import FastAPI, HTTPException
from fastapi.responses import HTMLResponse
from pydantic import BaseModel

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("dronesphere-web-bridge")


class ChatMessage(BaseModel):
    """Chat message from user."""
    message: str
    target_drone: int = 1


class MCPWebBridge:
    """Web bridge that communicates with the MCP server."""

    def __init__(self):
        """Initialize web bridge."""
        self.app = FastAPI(
            title="DroneSphere Web Interface",
            description="Natural language drone control via web browser",
            version="1.0.0"
        )
        self.setup_routes()

    def setup_routes(self):
        """Setup FastAPI routes."""

        @self.app.get("/", response_class=HTMLResponse)
        async def web_interface():
            """Serve the web interface."""
            return HTML_INTERFACE

        @self.app.post("/chat")
        async def process_chat(message: ChatMessage):
            """Process natural language chat message via MCP server."""
            try:
                result = await self._call_mcp_server(
                    "execute_drone_command",
                    {
                        "user_request": message.message,
                        "target_drone": message.target_drone
                    }
                )

                return {
                    "success": True,
                    "message": result,
                    "original_request": message.message
                }

            except Exception as e:
                logger.error(f"Chat processing error: {e}")
                return {
                    "success": False,
                    "message": f"Error: {str(e)}",
                    "original_request": message.message
                }

        @self.app.get("/status/{drone_id}")
        async def get_drone_status(drone_id: int):
            """Get drone status via MCP server."""
            try:
                result = await self._call_mcp_server(
                    "get_drone_status",
                    {"target_drone": drone_id}
                )

                return {"status": result}

            except Exception as e:
                logger.error(f"Status check error: {e}")
                raise HTTPException(status_code=500, detail=str(e))

        @self.app.get("/help")
        async def get_help():
            """Get available commands via MCP server."""
            try:
                result = await self._call_mcp_server("list_available_commands", {})
                return {"help": result}

            except Exception as e:
                logger.error(f"Help generation error: {e}")
                raise HTTPException(status_code=500, detail=str(e))

    async def _call_mcp_server(self, tool_name: str, arguments: Dict[str, Any]) -> str:
        """Call the MCP server tool and return the result."""

        # Prepare MCP request
        mcp_request = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "tools/call",
            "params": {
                "name": tool_name,
                "arguments": arguments
            }
        }

        try:
            # Start MCP server process
            process = await asyncio.create_subprocess_exec(
                "python3", "server.py",
                stdin=asyncio.subprocess.PIPE,
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )

            # Send request
            request_json = json.dumps(mcp_request) + "\n"
            stdout, stderr = await process.communicate(request_json.encode())

            if process.returncode != 0:
                raise Exception(f"MCP server error: {stderr.decode()}")

            # Parse response
            response_lines = stdout.decode().strip().split('\n')
            for line in response_lines:
                if line.strip():
                    try:
                        response = json.loads(line)
                        if "result" in response:
                            content = response["result"]["content"]
                            if content and len(content) > 0:
                                return content[0]["text"]
                    except json.JSONDecodeError:
                        continue

            raise Exception("No valid response from MCP server")

        except Exception as e:
            logger.error(f"MCP server communication error: {e}")
            raise

    async def run(self):
        """Run the web bridge server."""
        import uvicorn

        logger.info("Starting DroneSphere Web Bridge...")
        logger.info("üåê Web interface will be available at: http://localhost:3001")
        logger.info("ü§ñ Connecting to MCP server for command processing...")

        uvicorn.run(
            self.app,
            host="0.0.0.0",
            port=3001,
            log_level="info"
        )


# Simple HTML Interface
HTML_INTERFACE = """
<!DOCTYPE html>
<html>
<head>
    <title>DroneSphere - Natural Language Drone Control</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 4px 20px rgba(0,0,0,0.1); }
        .header { text-align: center; margin-bottom: 30px; color: #333; }
        .header h1 { color: #007bff; margin-bottom: 10px; }
        .chat-container { margin-bottom: 30px; }
        .input-group { display: flex; gap: 10px; margin-bottom: 20px; }
        .input-group input { flex: 1; padding: 12px; font-size: 16px; border: 2px solid #ddd; border-radius: 6px; }
        .input-group input:focus { border-color: #007bff; outline: none; }
        .input-group button { padding: 12px 20px; background: #007bff; color: white; border: none; border-radius: 6px; cursor: pointer; font-size: 16px; }
        .input-group button:hover { background: #0056b3; }
        .input-group button:disabled { background: #ccc; cursor: not-allowed; }
        .chat-history { min-height: 300px; max-height: 500px; overflow-y: auto; border: 2px solid #eee; padding: 20px; margin-bottom: 20px; background: #fafafa; border-radius: 6px; }
        .message { margin-bottom: 15px; padding: 12px; border-radius: 8px; }
        .user-message { background: #e3f2fd; margin-left: 10%; border-left: 4px solid #007bff; }
        .bot-message { background: #f1f8e9; margin-right: 10%; border-left: 4px solid #28a745; }
        .error-message { background: #ffebee; margin-right: 10%; border-left: 4px solid #dc3545; }
        .status-panel { background: #f8f9fa; padding: 15px; border-radius: 6px; margin-bottom: 20px; }
        .examples { background: #e8f4f8; padding: 20px; border-radius: 6px; }
        .example { background: white; padding: 10px; margin: 8px 0; border-radius: 4px; cursor: pointer; border: 1px solid #ddd; }
        .example:hover { background: #f0f8ff; border-color: #007bff; }
        .loading { color: #666; font-style: italic; }
        .timestamp { font-size: 12px; color: #888; margin-top: 5px; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üöÅ DroneSphere Control</h1>
            <p>Control your drone using natural language commands</p>
        </div>

        <div class="status-panel">
            <div id="systemStatus">
                <strong>System Status:</strong> <span id="statusText">Checking...</span>
            </div>
        </div>

        <div class="chat-container">
            <div class="input-group">
                <input type="text" id="messageInput" placeholder="Enter your command (e.g., 'take off to 15 meters')" />
                <button id="sendButton" onclick="sendMessage()">Send</button>
            </div>

            <div id="chatHistory" class="chat-history">
                <div class="bot-message">
                    <strong>ü§ñ DroneSphere:</strong> Ready for commands! Try saying "take off to 15 meters" or ask for help.
                    <div class="timestamp">${new Date().toLocaleTimeString()}</div>
                </div>
            </div>
        </div>

        <div class="examples">
            <h3>üí° Example Commands:</h3>
            <div class="example" onclick="setCommand('take off to 15 meters')">
                <strong>üöÄ Takeoff:</strong> "take off to 15 meters"
            </div>
            <div class="example" onclick="setCommand('check drone status')">
                <strong>üìä Status:</strong> "check drone status"
            </div>
            <div class="example" onclick="setCommand('fly to coordinates 47.398, 8.546')">
                <strong>üó∫Ô∏è Navigation:</strong> "fly to coordinates 47.398, 8.546"
            </div>
            <div class="example" onclick="setCommand('go 50 meters north and 30 meters east')">
                <strong>üß≠ Relative Move:</strong> "go 50 meters north and 30 meters east"
            </div>
            <div class="example" onclick="setCommand('wait 5 seconds then land')">
                <strong>‚è±Ô∏è Sequence:</strong> "wait 5 seconds then land"
            </div>
            <div class="example" onclick="setCommand('land the drone')">
                <strong>üõ¨ Landing:</strong> "land the drone"
            </div>
            <div class="example" onclick="setCommand('help')">
                <strong>‚ùì Help:</strong> "help" or "what commands are available?"
            </div>
        </div>
    </div>

    <script>
        let chatHistory = document.getElementById('chatHistory');
        let messageInput = document.getElementById('messageInput');
        let sendButton = document.getElementById('sendButton');

        function addMessage(content, type = 'bot', includeTimestamp = true) {
            let messageDiv = document.createElement('div');
            messageDiv.className = `message ${type}-message`;

            let messageContent = content;
            if (includeTimestamp) {
                messageContent += `<div class="timestamp">${new Date().toLocaleTimeString()}</div>`;
            }

            messageDiv.innerHTML = messageContent;
            chatHistory.appendChild(messageDiv);
            chatHistory.scrollTop = chatHistory.scrollHeight;
        }

        function setCommand(command) {
            messageInput.value = command;
            messageInput.focus();
        }

        function setLoading(loading) {
            sendButton.disabled = loading;
            sendButton.textContent = loading ? 'Processing...' : 'Send';
        }

        async function sendMessage() {
            let message = messageInput.value.trim();
            if (!message) return;

            addMessage(`<strong>üë§ You:</strong> ${message}`, 'user');
            messageInput.value = '';
            setLoading(true);

            try {
                const response = await fetch('/chat', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ message: message, target_drone: 1 })
                });

                const result = await response.json();

                if (result.success) {
                    addMessage(`<strong>ü§ñ DroneSphere:</strong> ${result.message}`, 'bot');
                } else {
                    addMessage(`<strong>ü§ñ DroneSphere:</strong> ${result.message}`, 'error');
                }

                updateStatus();

            } catch (error) {
                addMessage(`<strong>ü§ñ DroneSphere:</strong> Connection error: ${error.message}`, 'error');
            } finally {
                setLoading(false);
            }
        }

        async function updateStatus() {
            try {
                const response = await fetch('/status/1');
                const result = await response.json();

                document.getElementById('statusText').innerHTML = `
                    <span style="color: green;">‚úÖ Connected</span> |
                    Agent: ${result.status?.status || 'Unknown'} |
                    Backend: ${result.status?.backend_connected ? '‚úÖ' : '‚ùå'}
                `;

            } catch (error) {
                document.getElementById('statusText').innerHTML = `
                    <span style="color: red;">‚ùå Connection Error</span>
                `;
            }
        }

        messageInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter' && !sendButton.disabled) {
                sendMessage();
            }
        });

        // Initial status update
        updateStatus();
        setInterval(updateStatus, 15000); // Update every 15 seconds
    </script>
</body>
</html>
"""


def run(self):
        """Run the web bridge server."""
        import uvicorn

        logger.info("Starting DroneSphere Web Bridge...")
        logger.info("üåê Web interface will be available at: http://localhost:3001")
        logger.info("ü§ñ Connecting to MCP server for command processing...")

        uvicorn.run(
            self.app,
            host="0.0.0.0",
            port=3001,
            log_level="info"
        )


def main():
    """Main entry point for web bridge."""
    bridge = MCPWebBridge()
    bridge.run()


if __name__ == "__main__":
    main()
